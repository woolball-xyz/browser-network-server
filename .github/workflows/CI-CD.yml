name: CI CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  code_format:
    name: Code Format
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 10.0.100-preview.1.25120.13
    

    - name: Build and Run .NET Analyzers
      run: dotnet build --configuration Release /p:RunAnalyzersDuringBuild=true
  
  code_quality:
    needs: code_format
    name: SonarCloud scan
    runs-on: windows-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 10.0.100-preview.1.25120.13
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"woolball-xyz_browser-network-server" /o:"woolball-xyz" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
          dotnet build
          dotnet test --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  publish_api:
    name: Deploy Core.WebAPI
    runs-on: ubuntu-latest
    needs: [code_format]
    steps:
    - uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
    - name: Build and push Docker image
      run: |
         if [ ${{ github.ref }} = 'refs/heads/main' ]; then
          docker compose -f docker-compose.yml build core-api
          docker tag $(docker images -q ghcr.io/woolball-xyz/browser-network-server/core-api:latest) ghcr.io/woolball-xyz/browser-network-server/core-api:latest
          docker push ghcr.io/woolball-xyz/browser-network-server/core-api:latest

          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh api --method PATCH /user/packages/container/browser-network-server%2Fcore-api/versions/latest \
            -H "Accept: application/vnd.github+json" \
            -f visibility='public'
         else  
          docker compose -f docker-compose.yml build core-api
         fi

  publish_websocket:
    name: Deploy Core.WebSocket
    runs-on: ubuntu-latest
    needs: [code_format]
    steps:
    - uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
    - name: Build and push Docker image
      run: |
         if [ ${{ github.ref }} = 'refs/heads/main' ]; then
          docker compose -f docker-compose.yml build core-websocket
          docker tag $(docker images -q ghcr.io/woolball-xyz/browser-network-server/core-websocket:latest) ghcr.io/woolball-xyz/browser-network-server/core-websocket:latest
          docker push ghcr.io/woolball-xyz/browser-network-server/core-websocket:latest

          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh api --method PATCH /user/packages/container/browser-network-server%2Fcore-websocket/versions/latest \
            -H "Accept: application/vnd.github+json" \
            -f visibility='public'
         else  
          docker compose -f docker-compose.yml build core-websocket
         fi

  publish_background:
    name: Deploy Core.Background
    runs-on: ubuntu-latest
    needs: [code_format]
    steps:
    - uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
    - name: Build and push Docker image
      run: |
         if [ ${{ github.ref }} = 'refs/heads/main' ]; then
          docker compose -f docker-compose.yml build core-background
          docker tag $(docker images -q ghcr.io/woolball-xyz/browser-network-server/core-background:latest) ghcr.io/woolball-xyz/browser-network-server/core-background:latest
          docker push ghcr.io/woolball-xyz/browser-network-server/core-background:latest

          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh api --method PATCH /user/packages/container/browser-network-server%2Fcore-background/versions/latest \
            -H "Accept: application/vnd.github+json" \
            -f visibility='public'
         else  
          docker compose -f docker-compose.yml build core-background
         fi
         

